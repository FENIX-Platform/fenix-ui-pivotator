{"version":3,"sources":["webpack:///fenix-ui-pivotator.min.js","webpack:///webpack/bootstrap 61703a42c7385bba690d","webpack:///./src/js/index.js","webpack:///./src/js/functions.js","webpack:///external \"jStat\""],"names":["define","__WEBPACK_EXTERNAL_MODULE_3__","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","myFunction","extractData","data","options","extractor","extracted","length","i","concat","buildPivotResult","opt","row","rows","cols","columns","getValue","myfunc","getGetValue","valueOutputType","cumulative","a","dat","listTotalColumns","listTotalRows","len","result","values","indexR","indexC","r","push","join","j","sort","pivotData","userOptions","undefined","Utils","copyProperties","defaultOptions","toPivotData","FX","tmp","metadata","dsd","d","derived","toFX","pivotdata","ii","temp","split","jj","vtemp","vindex","myAgg","aggregationFn","getAgg","getFormater","formatter","decimals","traduc","title","ROWS","EN","COLS","replace","subject","toFXJson","MYFINALRESULT","unit","flag","attribute","cols2","cols2label","okline","nookline","rowname","colsname","temp2","hasOwnProperty","showRowHeaders","JSON","parse","stringify","hidden2","hidden","source","dest","k","isArray","testObject","propertyIsEnumerable","stringComparator","b","localeCompare","numberComparator","defaultComparator","makeComparator","fields","comparators","entry","entryType","this","v","field","identity","x","toTree","arr","mySpan","listToTree","list","childKey","parentKey","childrenKey","nodeFn","node","name","children","nodeCache","reduce","tree","parentNode","walkTree","visitorFn","parent","forEach","child","pruneChildren","setColRowSpan","treeToTab","prof","profCurrent","ret","span","indexMap","index","slice","indexOld","parentId","ret2","pivot","apply","jStat","Aggregator","VALUE0","default","cell","format","nbDec","sum","avg","mean","median","stdev","count","Value","VALUE","value","um","diff","v1","GetValue","rec","champ","number","parseFloat","string","Formater","localstring","e","nbdecimal","Math","floor","pow","toLocaleString","getListAggregator","choix"],"mappings":"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","file":"fenix-ui-pivotator.min.js","sourcesContent":["define([\"jStat\"], function(__WEBPACK_EXTERNAL_MODULE_3__) { return /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;if (false) {\n\t    var define = require('amdefine')(module);\n\t}\n\t\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function (myFunction) {\n\t    'use strict';\n\t    //FIG\n\t    var MYFINALRESULT;\n\t    var myfunc = new myFunction();\n\t\n\t    var Utils = {\n\t        copyProperties: function (source, dest) {\n\t            for (var k in source) {\n\t                if (source.hasOwnProperty(k)) {\n\t                    dest[k] = source[k];\n\t                }\n\t            }\n\t        },\n\t        isArray: function (testObject) {\n\t            return testObject && !(testObject.propertyIsEnumerable('length')) && typeof testObject === 'object' && typeof testObject.length === 'number';\n\t        },\n\t        stringComparator: function (a, b) {\n\t            return a.localeCompare(b);\n\t        },\n\t        numberComparator: function (a, b) {\n\t            if (a > b) {\n\t                return 1;\n\t            } else if (b > a) {\n\t                return -1;\n\t            } else {\n\t                return 0;\n\t            }\n\t        },\n\t        defaultComparator: function () {\n\t            return 0;\n\t        },\n\t        makeComparator: function (fields, data, comparators) {\n\t            var len = fields.length;\n\t            var i;\n\t            var c = [];\n\t            for (i = 0; i < len; i++) {\n\t                var entry = data[0][fields[i]];\n\t                var entryType = typeof entry;\n\t                if (typeof comparators[fields[i]] === 'function') {\n\t                    c[i] = comparators[fields[i]];\n\t                } else if (entryType === 'number') {\n\t                    c[i] = this.numberComparator;\n\t                } else if (entryType === 'string') {\n\t                    c[i] = this.stringComparator;\n\t                } else if (Utils.isArray(entry)) {\n\t                    c[i] = this.defaultComparator;\n\t                } else {\n\t                    c[i] = this.defaultComparator;\n\t                }\n\t            }\n\t            return function (a, b) {\n\t                var v = 0;\n\t                for (i = 0; i < len; i++) {\n\t                    var field = fields[i];\n\t                    v = c[i](a[field], b[field]);\n\t                    if (v !== 0) {\n\t                        return v;\n\t                    }\n\t                }\n\t                return 0;\n\t            }\n\t        }\n\t    };\n\t\n\t    var identity = function () {\n\t        return x\n\t    }\n\t\n\t\n\t    var toTree = function (arr, mySpan) {\n\t        var data = [{id: 'root'}];\n\t        var indexMap = {}\n\t        for (var i in arr) {\n\t            for (var j = 1; j <= arr[i].length; j++) {\n\t                var index = arr[i].slice(0, j).join(\"_\");\n\t                if (!indexMap[index]) {\n\t                    indexMap[index] = false;\n\t                }\n\t                var indexOld = \"\"\n\t                if (j > 1) {\n\t                    indexOld = arr[i].slice(0, j - 1).join(\"_\");\n\t                }\n\t                if (indexMap[index] == false) {\n\t                    if (indexOld.length > 0) {\n\t                        data.push({\"id\": index, \"parentId\": indexOld})\n\t                    }\n\t                    else {\n\t                        data.push({\"id\": index, \"parentId\": 'root'})\n\t                    }\n\t                }\n\t                indexMap[index] = true;\n\t            }\n\t        }\n\t        //\t\tconsole.log(data);\n\t\n\t        var options = {childKey: 'id', parentKey: 'parentId'};\n\t\n\t\n\t        //document.body.innerHTML += '<pre>' + JSON.stringify(tree, null, 4) + '</pre>';\n\t\n\t        function listToTree(list, options) {\n\t            options = options || {};\n\t            var childKey = options.childKey || 'child';\n\t            var parentKey = options.parentKey || 'parent';\n\t            var childrenKey = options.childrenKey || 'children';\n\t            var nodeFn = options.nodeFn || function (node, name, children) {\n\t                    return {name: name, children: children};\n\t                };\n\t            var nodeCache = {};\n\t            return list.reduce(function (tree, node) {\n\t                node[childrenKey] = [];\n\t                nodeCache[node[childKey]] = node;\n\t                if (typeof node[parentKey] === 'undefined' || node[parentKey] === '') {\n\t                    tree = nodeFn(node, node[childKey], node[childrenKey]);\n\t                } else {\n\t                    var parentNode = nodeCache[node[parentKey]];\n\t                    parentNode[childrenKey].push(nodeFn(node, node[childKey], node[childrenKey]));\n\t                }\n\t                return tree;\n\t            }, {});\n\t        }\n\t\n\t        function walkTree(tree, visitorFn, parent) {\n\t            if (visitorFn == null || typeof visitorFn !== 'function') {\n\t                return tree;\n\t            }\n\t            visitorFn.call(tree, tree, parent);\n\t            if (tree.children && tree.children.length > 0) {\n\t                tree.children.forEach(function (child) {\n\t                    walkTree(child, visitorFn, tree);\n\t                });\n\t            }\n\t            return tree;\n\t        }\n\t\n\t        function pruneChildren(node, parent) {\n\t            if (node.children.length < 1) {\n\t                delete node.children;\n\t            }\n\t        }\n\t\n\t\n\t        function setColRowSpan(tree) {\n\t            if (!tree.children || tree.children.length == 0) {\n\t                tree[\"span\"] = 1\n\t            }\n\t            else {\n\t                tree[\"span\"] = 0;\n\t            }\n\t            for (var i in tree.children) {\n\t                tree[\"span\"] += setColRowSpan(tree.children[i])\n\t            }\n\t            return tree[\"span\"];\n\t        }\n\t\n\t        var tree = walkTree(listToTree(data, options), pruneChildren);\n\t        setColRowSpan(tree, mySpan)\n\t\n\t        function treeToTab(tree, prof, profCurrent) {\n\t            var ret = [];\n\t            if (prof == profCurrent) {\n\t                for (var i in tree.children) {\n\t                    //console.log(\"INSIDE\",tree.children[i])\n\t                    ret.push({id: tree.children[i].name, span: tree.children[i].span})\n\t                }\n\t            }\n\t            else {\n\t                for (var i in tree.children) {\n\t                    ret = ret.concat(treeToTab(tree.children[i], prof, profCurrent + 1))\n\t                }\n\t            }\n\t            return ret;\n\t        }\n\t\n\t\n\t        var ret2 = [];\n\t        for (var i in arr[0]) {//console.log(\"HIHI\",i);\n\t            var temp = []\n\t            //console.log(ret[i],treeToTab(tree,i,0))\n\t            temp = treeToTab(tree, i, 0);\n\t            ret2.push(temp);\n\t        }\n\t        //console.log('final ret',ret2);\n\t        return ret2;//tree;\n\t    }\n\t    var defaultOptions = {extractor: null, comparators: {}};\n\t\n\t    function extractData(data, options) {\n\t        var extractor = options.extractor;\n\t        if (typeof extractor === 'function') {\n\t            var extracted = [];\n\t            var length = data.length;\n\t            for (var i = 0; i < length; i++) {\n\t                //console.log(\"verif\",data[i])\n\t                extracted = extracted.concat(extractor(data[i]));\n\t                //extracted.push(extractor(data[i]));\n\t            }\n\t            return extracted;\n\t        } else {\n\t            return data;\n\t        }\n\t    }\n\t\n\t\n\t    //function buildPivotResult(data, row, cols, getValue, cumulative) {\n\t    function buildPivotResult(data, opt) {\n\t\n\t        var row = opt.rows, cols = opt.columns, getValue = myfunc.getGetValue(opt.valueOutputType), cumulative = opt.cumulative\n\t\n\t        //console.log(\"buildPivotResult\",\"data\",data, \"opt\",opt);\n\t        if (!getValue) {\n\t            getValue = function (a) {\n\t                return a\n\t            }\n\t        }//mapping\n\t\n\t        var listTotalColumns = {};\n\t        var listTotalRows = {};\n\t        var columns = [];\n\t        var rows = [];\n\t        var len = data.length;\n\t        var dat;\n\t        //var result = {};\n\t        var result = {};\n\t        //console.log(\"opt\",opt)\n\t        for (var i = 0; i < opt.values.length; i++) {\n\t            result[opt.values[i]] = {};\n\t        }\n\t\n\t\n\t        for (var i = 0; i < len; i++) {\n\t\n\t            var indexR = [];\n\t            var indexC = [];\n\t            dat = data[i];\n\t            for (var r in row) {\n\t                indexR.push(data[i][row[r]]);\n\t            }\n\t            for (var c in cols) {\n\t                indexC.push(data[i][cols[c]]);\n\t            }\n\t            indexR = indexR.join(\"|*\");\n\t            indexC = indexC.join(\"|*\");\n\t\n\t            for (var j = 0; j < opt.values.length; j++) {\n\t                if (!result[opt.values[j]][indexR]) {\n\t                    result[opt.values[j]][indexR] = {};\n\t                }\n\t\n\t                if (!result[opt.values[j]][indexR][indexC]) {\n\t                    result[opt.values[j]][indexR][indexC] = [myfunc.getGetValue(opt.values[j], \"number\")(dat, opt.values[j])];\n\t                }\n\t                else {\n\t                    result[opt.values[j]][indexR][indexC].push(myfunc.getGetValue(opt.values[j], \"number\")(dat, opt.values[j]));\n\t                }\n\t            }\n\t\n\t\n\t            listTotalColumns[indexC] = true;\n\t            listTotalRows[indexR] = true;\n\t        }\n\t\n\t        for (var i in listTotalColumns) {\n\t            columns.push(i)\n\t        }\n\t        for (var i in listTotalRows) {\n\t            rows.push(i)\n\t        }\n\t        rows.sort();\n\t        cols.sort();\n\t        //console.log(\"result\",result)\n\t        return {data: result, columns: columns, rows: rows};\n\t    }\n\t\n\t\n\t    /*  function makeHeaders(data, fieldNames) {\n\t     var result = [];\n\t     var dataLength = data.length;\n\t     var namesLength = fieldNames.length;\n\t     var i, j;\n\t     for (i = 0; i < dataLength; i++) {\n\t     var datum = data[i];\n\t     var entry = [];\n\t     for (j = 0; j < namesLength; j++) {\n\t     entry[j] = datum[fieldNames[j]];\n\t     }\n\t     result[i] = entry;\n\t     }\n\t     return result;\n\t     }*/\n\t    function pivotData(data, userOptions) {\n\t        //console.log(\"pivotData\");\n\t        if (userOptions === undefined) {\n\t            userOptions = {};\n\t        }\n\t        var options = {};\n\t        Utils.copyProperties(defaultOptions, options);\n\t        if (userOptions) {\n\t            Utils.copyProperties(userOptions, options);\n\t        }\n\t        // var leftSet = new SortedSet(Utils.makeComparator(rowNames, data, options));\n\t        //var topSet = new SortedSet(Utils.makeComparator(columnNames, data, options));\n\t\n\t        //console.log(\"leftSet\",leftSet,\"topSet\",topSet)\n\t        //ONLY if we want to use an derived attributs function or a filter attribute\n\t        //options.extractor=function(e){return e}\n\t        if (options.extractor) {\n\t            data = extractData(data, options);\n\t        }\n\t\n\t        //return buildPivotResult(data, userOptions.ROWS, userOptions.COLS, myfunc.getGetValue(userOptions.GetValue), userOptions.cumulative);\n\t        return buildPivotResult(data, userOptions);\n\t\n\t    }\n\t\n\t\n\t    function toPivotData(FX, userOptions) {\n\t        //console.log(\"toPivotData\",FX,userOptions)\n\t        var data = [];\n\t        //console.log(\"userOptions toPivotDat\",userOptions, userOptions.derived)\n\t//\t\tvar derivedAttributes=userOptions.derivedAttributes\n\t        for (var i in FX.data) {\n\t            var tmp = {}\n\t            for (var j in FX.metadata.dsd.columns) {\n\t                tmp[FX.metadata.dsd.columns[j].id] = FX.data[i][j];\n\t\n\t            }\n\t            for (var d in userOptions.derived) {\n\t                //console.log(userOptions.derived[d])\n\t                tmp[d] = userOptions.derived[d](tmp);\n\t            }\n\t            //console.log(tmp)\n\t            data.push(tmp);\n\t        }\n\t        //console.log(\"pivotdata\",data)\n\t\n\t        return pivotData(data, userOptions);\n\t    }\n\t\n\t    function toFX(FX, userOptions) {\n\t        var result = {data: [], metadata: {dsd: {columns: []}}}\n\t        var pivotdata = toPivotData(FX, userOptions);\n\t        for (var ii in pivotdata.rows) {\n\t            var i = pivotdata.rows[ii];\n\t            var temp = i.split(\"|*\");\n\t\n\t            //for internaldata\n\t            for (var jj in pivotdata.columns) {\n\t                var j = pivotdata.columns[jj];\n\t                /*if (pivotdata.data[i][j]) {\n\t                 temp.push(myfunc.getAgg(userOptions.Aggregator)(pivotdata.data[i][j],\n\t                 myfunc.getFormater(userOptions.Formater),userOptions.nbDecimal) )\n\t                 //temp2.push(myfunc.getAgg(userOptions.aggregator)(pivotdata.data[i][j], myfunc.getFormater(userOptions.formater), userOptions.nbDecimal));\n\t                 //console.log(pivotdata.data[i][j])\n\t                 }\n\t                 else {\n\t                 temp.push(null);\n\t                 //temp2.push(null)\n\t                 }*/\n\t\n\t\n\t                for (var vtemp in userOptions.values) {\n\t                    var vindex = userOptions.values[vtemp]\n\t                    if (pivotdata.data[vindex][i][j]) {\n\t                        var myAgg = null;\n\t                        //console.log(userOptions.formatter,vindex)\n\t                        if (userOptions.aggregationFn[vindex]) {\n\t                            myAgg = userOptions.aggregationFn[vindex]\n\t                        }\n\t                        else {\n\t                            myAgg = \"default\"\n\t                        }\n\t                        temp.push(myfunc.getAgg(vindex, myAgg)(pivotdata.data[vindex][i][j],\n\t                            myfunc.getFormater(userOptions.formatter),\n\t                            userOptions.decimals));\n\t                    }\n\t                    else {\n\t                        temp.push(null)\n\t                    }\n\t                }\n\t\n\t\n\t            }\n\t            result.data.push(temp)\n\t            //MYFINALRESULT.data.push(temp2)\n\t        }\n\t\n\t        var traduc = {}\n\t        for (var i in FX.metadata.dsd.columns) {\n\t            traduc[FX.metadata.dsd.columns[i].id] = FX.metadata.dsd.columns[i].title[\"EN\"]\n\t        }\n\t\n\t        for (var i in userOptions.ROWS) {\n\t            result.metadata.dsd.columns.push({id: userOptions.ROWS[i], title: {EN: traduc[userOptions.ROWS[i]]}})\n\t        }\n\t        for (var i in userOptions.COLS) {\n\t            result.metadata.dsd.columns.push({id: userOptions.COLS[i], title: {EN: traduc[userOptions.COLS[i]]}})\n\t        }\n\t\n\t\n\t        for (var i in pivotdata.columns) {\n\t            result.metadata.dsd.columns.push({\n\t                id: i.replace(/\\|\\*/g, \"_\"),\n\t                title: {EN: i.replace(/\\|\\*/g, \"\\n\")},\n\t                subject: \"value\"\n\t            })\n\t        }\n\t        return result;\n\t\n\t    }\n\t\n\t\n\t    function toFXJson(FX, userOptions) {\n\t        //console.log(\"toFXJson\",FX,userOptions);\n\t        MYFINALRESULT = {\n\t            data: [],\n\t            unit: [],\n\t            flag: [],\n\t            attribute: [],\n\t            rows: [],\n\t            cols: [],\n\t            cols2: [],\n\t            cols2label: [],\n\t            okline: [],\n\t            nookline: [],\n\t            rowname: [],\n\t            colsname: []\n\t        };//to internal test and dataset function\n\t\n\t\n\t        var pivotdata = toPivotData(FX, userOptions);\n\t        for (var ii in pivotdata.rows) {\n\t            var i = pivotdata.rows[ii];\n\t\n\t            var temp = i.split(\"|*\");\n\t            MYFINALRESULT.rows.push(temp);\n\t\n\t            var temp2 = [];\n\t            if (userOptions.hasOwnProperty(\"showRowHeaders\") && userOptions.showRowHeaders == true) {\n\t                temp2 = JSON.parse(JSON.stringify(temp))\n\t            }\n\t            //for internaldata\n\t\n\t\n\t            for (var jj in pivotdata.columns) {\n\t                var j = pivotdata.columns[jj];\n\t\n\t                for (var vtemp in userOptions.values) {\n\t                    var vindex = userOptions.values[vtemp]\n\t                    if (pivotdata.data[vindex][i][j]) {\n\t                        var myAgg = null;\n\t\n\t                        if (userOptions.aggregationFn[vindex]) {\n\t                            myAgg = userOptions.aggregationFn[vindex]\n\t                        }\n\t                        else {\n\t                            myAgg = \"default\";\n\t                        }\n\t\n\t\n\t                        temp2.push(myfunc.getAgg(vindex, myAgg)(pivotdata.data[vindex][i][j],\n\t                            myfunc.getFormater(userOptions.formatter),\n\t                            userOptions.decimals));\n\t\n\t                    }\n\t                    else {\n\t                        temp2.push(null)\n\t                    }\n\t                }\n\t            }\n\t            MYFINALRESULT.data.push(temp2)\n\t        }\n\t\n\t        var traduc = {}\n\t        for (var i in FX.metadata.dsd.columns) {\n\t            traduc[FX.metadata.dsd.columns[i].id] = FX.metadata.dsd.columns[i].title[\"EN\"]\n\t        }\n\t\n\t        for (var i in userOptions.rows) {\n\t            MYFINALRESULT.rowname.push({id: userOptions.rows[i], title: {EN: traduc[userOptions.rows[i]]}})\n\t        }\n\t        if (userOptions.rows.length == 0) {\n\t            MYFINALRESULT.rowname.push({id: \"row\", title: {EN: \"ROW\"}})\n\t        }\n\t        for (var i in userOptions.columns) {\n\t            MYFINALRESULT.colsname.push({id: userOptions.columns[i], title: {EN: traduc[userOptions.columns[i]]}})\n\t        }\n\t\n\t        //console.log(\"userOptions\",userOptions)\n\t        var hidden2 = {};\n\t        for (var i in userOptions.hidden) {\n\t            hidden2[userOptions.hidden[i]] = true\n\t        }\n\t\n\t\n\t        for (var ii in pivotdata.columns) {\n\t            var i = pivotdata.columns[ii];\n\t            MYFINALRESULT.cols.push({id: i.replace(/\\|\\*/g, \"_\"), title: {EN: i.replace(/\\|\\*/g, \"\\n\")}});\n\t            MYFINALRESULT.cols2.push(i.split(\"|*\"))\n\t\n\t\n\t            MYFINALRESULT.cols2label.push(i.split(\"|*\"))\n\t\n\t        }\n\t\n\t        return MYFINALRESULT;\n\t\n\t    }\n\t\n\t\n\t    return function () {\n\t        return {\n\t            pivot: toFXJson,\n\t\n\t\n\t            toFXJson: toFXJson,\n\t            toPivotData: toPivotData,\n\t            toFX: toFX,\n\t\n\t\n\t            identity: identity,\n\t            toTree: toTree\n\t        }\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;if (false) {\n\t    var define = require('amdefine')(module);\n\t}\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\n\t        var jStat = __webpack_require__(3).jStat;\n\t\n\t        var Aggregator = {\n\t            \"VALUE0\": {\n\t\n\t                \"default\": function (cell, format, nbDec) {\n\t                    //\tconsole.log(\"AGG DEFAULT\",cell)\n\t                    var a = jStat(cell);\n\t                    return format(a.sum(), nbDec)\n\t                },\n\t                \"sum\": function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.sum(), nbDec)\n\t                },\n\t                avg: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.mean(), nbDec)\n\t                },\n\t                median: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.median(), nbDec)\n\t                },\n\t                stdev: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.stdev(), nbDec)\n\t                },\n\t                count: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return format(a.length, nbDec)\n\t                },\n\t                concat: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return a.join(\" - \")\n\t                }\n\t            },\n\t            \"Value\": {\n\t\n\t                \"default\": function (cell, format, nbDec) {\n\t                    //\tconsole.log(\"AGG DEFAULT\",cell)\n\t                    var a = jStat(cell);\n\t                    return format(a.sum(), nbDec)\n\t                },\n\t                \"sum\": function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.sum(), nbDec)\n\t                },\n\t                avg: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.mean(), nbDec)\n\t                },\n\t                median: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.median(), nbDec)\n\t                },\n\t                stdev: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.stdev(), nbDec)\n\t                },\n\t                count: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return format(a.length, nbDec)\n\t                },\n\t                concat: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return a.join(\" - \")\n\t                }\n\t            },\n\t            \"VALUE\": {\n\t\n\t                \"default\": function (cell, format, nbDec) {\n\t                    //\tconsole.log(\"AGG DEFAULT\",cell)\n\t                    var a = jStat(cell);\n\t                    return format(a.sum(), nbDec)\n\t                },\n\t                \"sum\": function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.sum(), nbDec)\n\t                },\n\t                avg: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.mean(), nbDec)\n\t                },\n\t                median: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.median(), nbDec)\n\t                },\n\t                stdev: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.stdev(), nbDec)\n\t                },\n\t                count: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return format(a.length, nbDec)\n\t                },\n\t                concat: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return a.join(\" - \")\n\t                }\n\t            },\n\t            \"value\": {\n\t\n\t                \"default\": function (cell, format, nbDec) {\n\t                    //\tconsole.log(\"AGG DEFAULT\",cell)\n\t                    var a = jStat(cell);\n\t                    return format(a.sum(), nbDec)\n\t                },\n\t                \"sum\": function (cell, format, nbDec) {\n\t\n\t                    var a = jStat(cell);\n\t                    return format(a.sum(), nbDec)\n\t                },\n\t                avg: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.mean(), nbDec)\n\t                },\n\t                median: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.median(), nbDec)\n\t                },\n\t                stdev: function (cell, format, nbDec) {\n\t                    var a = jStat(cell);\n\t                    return format(a.stdev(), nbDec)\n\t                },\n\t                count: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return format(a.length, nbDec)\n\t                },\n\t                concat: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return a.join(\" - \")\n\t                }\n\t            },\n\t            um: {\n\t                default: function (cell, format, nbDec) {\n\t                    var ret = cell[0];\n\t                    for (var i in cell) {\n\t\n\t                        if (cell[i] != ret) {\n\t                            ret = \"_\";\n\t                        }\n\t                    }\n\t                    return ret;\n\t                },\n\t                diff: function (cell, format, nbDec) {\n\t                    var ret = cell[0];\n\t                    for (var i in cell) {\n\t\n\t                        if (cell[i] != ret) {\n\t                            ret = \"_\";\n\t                        }\n\t                    }\n\t                    return ret;\n\t\n\t                }\n\t            },\n\t            flag: {\n\t                concat: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return a.join(\" - \")\n\t                },\n\t                default: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return a.join(\" - \")\n\t                }\n\t            },\n\t            v1: {\n\t                count: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return format(a.length, nbDec)\n\t                },\n\t                concat: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return a.join(\" - \")\n\t                },\n\t                default: function (cell, format, nbDec) {\n\t                    var a = cell;\n\t                    return a.join(\" - \")\n\t                }\n\t            },\n\t            default: function (cell, format, nbDec) {\n\t                var a = cell;\n\t                return a.join(\" \")\n\t            }\n\t        };\n\t        //\tconsole.log(\"Aggregator\",Aggregator.value)\n\t\n\t\n\t        var GetValue = {\n\t            default: function (rec, champ) {\n\t                return rec[champ];\n\t            },\n\t            value: {\n\t                number: function (rec) {\n\t                    if (rec.value == null) {\n\t                        return null\n\t                    }\n\t                    return parseFloat(rec.value)\n\t                }\n\t                ,\n\t                string: function (rec) {\n\t                    return rec.value\n\t                }\n\t            },\n\t            Value: {\n\t                number: function (rec) {\n\t                    if (rec.Value == null) {\n\t                        return null\n\t                    }\n\t                    return parseFloat(rec.Value)\n\t                }, string: function (rec) {\n\t                    return rec.Value\n\t                }\n\t            }\n\t\n\t        };\n\t        /*Classic:function(rec){return rec.Value},\n\t         classic:function(rec){return rec.value},\n\t         ClassicToNumber:function(rec){if(rec.Value==null){return null}return parseFloat(rec.Value)},\n\t         classicToNumber:function(rec){if(rec.value==null){return null}return parseFloat(rec.value)},\n\t         customToString:function(rec,args){ret=[];for(var i in args){ret.push(rec[args[i]])}},\n\t         customToNumber:function(rec,args){ret=[];for(var i in args){ret.push( parseFloat(rec[args[i]]) )}}*/\n\t\n\t\n\t        var Formater = {\n\t            localstring: function (e, nbdecimal) {\n\t                return (Math.floor(e * Math.pow(10, nbdecimal)) / Math.pow(10, nbdecimal)).toLocaleString()\n\t            },\n\t            value: function (e, nbdecimal) {\n\t                return Math.floor(e * Math.pow(10, nbdecimal)) / Math.pow(10, nbdecimal)\n\t            },\n\t            string: function (e, nbdecimal) {\n\t                return e\n\t            }\n\t\n\t        };\n\t\n\t        var getListAggregator = function () {//for toolbar\n\t            ret = {};\n\t            for (var i in Aggregator) {\n\t\n\t                ret[i] = {};\n\t                for (var j in Aggregator[i]) {\n\t                    ret[i][j] = Aggregator[i][j];\n\t                }\n\t\n\t            }\n\t            return ret;\n\t        }\n\t\n\t        var getAgg = function (champ, choix) {\n\t\n\t            if (!Aggregator[champ]) {\n\t                return Aggregator.default\n\t            }\n\t            if (!choix) {\n\t                choix = \"default\";\n\t            }\n\t            return Aggregator[champ][choix];\n\t        }\n\t\n\t        var getGetValue = function (champ, choix) {\n\t            if (!GetValue[champ]) {\n\t                return GetValue[\"default\"]\n\t            }\n\t            else if (!GetValue[champ][choix]) {\n\t                return GetValue[\"default\"]\n\t            }\n\t            else {\n\t                return GetValue[champ][choix]\n\t            }\n\t        }\n\t\n\t        var getFormater = function (choix) {\n\t            return Formater[choix]\n\t        }\n\t\n\t        return function () {\n\t            return {\n\t                getListAggregator: getListAggregator,\n\t                getAgg: getAgg,\n\t                getGetValue: getGetValue,\n\t                getFormater: getFormater\n\t            }\n\t        }\n\t\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ }\n/******/ ])});;\n\n\n/** WEBPACK FOOTER **\n ** fenix-ui-pivotator.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 61703a42c7385bba690d\n **/","if (typeof define !== 'function') {\n    var define = require('amdefine')(module);\n}\n\ndefine([\"./functions\"], function (myFunction) {\n    'use strict';\n    //FIG\n    var MYFINALRESULT;\n    var myfunc = new myFunction();\n\n    var Utils = {\n        copyProperties: function (source, dest) {\n            for (var k in source) {\n                if (source.hasOwnProperty(k)) {\n                    dest[k] = source[k];\n                }\n            }\n        },\n        isArray: function (testObject) {\n            return testObject && !(testObject.propertyIsEnumerable('length')) && typeof testObject === 'object' && typeof testObject.length === 'number';\n        },\n        stringComparator: function (a, b) {\n            return a.localeCompare(b);\n        },\n        numberComparator: function (a, b) {\n            if (a > b) {\n                return 1;\n            } else if (b > a) {\n                return -1;\n            } else {\n                return 0;\n            }\n        },\n        defaultComparator: function () {\n            return 0;\n        },\n        makeComparator: function (fields, data, comparators) {\n            var len = fields.length;\n            var i;\n            var c = [];\n            for (i = 0; i < len; i++) {\n                var entry = data[0][fields[i]];\n                var entryType = typeof entry;\n                if (typeof comparators[fields[i]] === 'function') {\n                    c[i] = comparators[fields[i]];\n                } else if (entryType === 'number') {\n                    c[i] = this.numberComparator;\n                } else if (entryType === 'string') {\n                    c[i] = this.stringComparator;\n                } else if (Utils.isArray(entry)) {\n                    c[i] = this.defaultComparator;\n                } else {\n                    c[i] = this.defaultComparator;\n                }\n            }\n            return function (a, b) {\n                var v = 0;\n                for (i = 0; i < len; i++) {\n                    var field = fields[i];\n                    v = c[i](a[field], b[field]);\n                    if (v !== 0) {\n                        return v;\n                    }\n                }\n                return 0;\n            }\n        }\n    };\n\n    var identity = function () {\n        return x\n    }\n\n\n    var toTree = function (arr, mySpan) {\n        var data = [{id: 'root'}];\n        var indexMap = {}\n        for (var i in arr) {\n            for (var j = 1; j <= arr[i].length; j++) {\n                var index = arr[i].slice(0, j).join(\"_\");\n                if (!indexMap[index]) {\n                    indexMap[index] = false;\n                }\n                var indexOld = \"\"\n                if (j > 1) {\n                    indexOld = arr[i].slice(0, j - 1).join(\"_\");\n                }\n                if (indexMap[index] == false) {\n                    if (indexOld.length > 0) {\n                        data.push({\"id\": index, \"parentId\": indexOld})\n                    }\n                    else {\n                        data.push({\"id\": index, \"parentId\": 'root'})\n                    }\n                }\n                indexMap[index] = true;\n            }\n        }\n        //\t\tconsole.log(data);\n\n        var options = {childKey: 'id', parentKey: 'parentId'};\n\n\n        //document.body.innerHTML += '<pre>' + JSON.stringify(tree, null, 4) + '</pre>';\n\n        function listToTree(list, options) {\n            options = options || {};\n            var childKey = options.childKey || 'child';\n            var parentKey = options.parentKey || 'parent';\n            var childrenKey = options.childrenKey || 'children';\n            var nodeFn = options.nodeFn || function (node, name, children) {\n                    return {name: name, children: children};\n                };\n            var nodeCache = {};\n            return list.reduce(function (tree, node) {\n                node[childrenKey] = [];\n                nodeCache[node[childKey]] = node;\n                if (typeof node[parentKey] === 'undefined' || node[parentKey] === '') {\n                    tree = nodeFn(node, node[childKey], node[childrenKey]);\n                } else {\n                    var parentNode = nodeCache[node[parentKey]];\n                    parentNode[childrenKey].push(nodeFn(node, node[childKey], node[childrenKey]));\n                }\n                return tree;\n            }, {});\n        }\n\n        function walkTree(tree, visitorFn, parent) {\n            if (visitorFn == null || typeof visitorFn !== 'function') {\n                return tree;\n            }\n            visitorFn.call(tree, tree, parent);\n            if (tree.children && tree.children.length > 0) {\n                tree.children.forEach(function (child) {\n                    walkTree(child, visitorFn, tree);\n                });\n            }\n            return tree;\n        }\n\n        function pruneChildren(node, parent) {\n            if (node.children.length < 1) {\n                delete node.children;\n            }\n        }\n\n\n        function setColRowSpan(tree) {\n            if (!tree.children || tree.children.length == 0) {\n                tree[\"span\"] = 1\n            }\n            else {\n                tree[\"span\"] = 0;\n            }\n            for (var i in tree.children) {\n                tree[\"span\"] += setColRowSpan(tree.children[i])\n            }\n            return tree[\"span\"];\n        }\n\n        var tree = walkTree(listToTree(data, options), pruneChildren);\n        setColRowSpan(tree, mySpan)\n\n        function treeToTab(tree, prof, profCurrent) {\n            var ret = [];\n            if (prof == profCurrent) {\n                for (var i in tree.children) {\n                    //console.log(\"INSIDE\",tree.children[i])\n                    ret.push({id: tree.children[i].name, span: tree.children[i].span})\n                }\n            }\n            else {\n                for (var i in tree.children) {\n                    ret = ret.concat(treeToTab(tree.children[i], prof, profCurrent + 1))\n                }\n            }\n            return ret;\n        }\n\n\n        var ret2 = [];\n        for (var i in arr[0]) {//console.log(\"HIHI\",i);\n            var temp = []\n            //console.log(ret[i],treeToTab(tree,i,0))\n            temp = treeToTab(tree, i, 0);\n            ret2.push(temp);\n        }\n        //console.log('final ret',ret2);\n        return ret2;//tree;\n    }\n    var defaultOptions = {extractor: null, comparators: {}};\n\n    function extractData(data, options) {\n        var extractor = options.extractor;\n        if (typeof extractor === 'function') {\n            var extracted = [];\n            var length = data.length;\n            for (var i = 0; i < length; i++) {\n                //console.log(\"verif\",data[i])\n                extracted = extracted.concat(extractor(data[i]));\n                //extracted.push(extractor(data[i]));\n            }\n            return extracted;\n        } else {\n            return data;\n        }\n    }\n\n\n    //function buildPivotResult(data, row, cols, getValue, cumulative) {\n    function buildPivotResult(data, opt) {\n\n        var row = opt.rows, cols = opt.columns, getValue = myfunc.getGetValue(opt.valueOutputType), cumulative = opt.cumulative\n\n        //console.log(\"buildPivotResult\",\"data\",data, \"opt\",opt);\n        if (!getValue) {\n            getValue = function (a) {\n                return a\n            }\n        }//mapping\n\n        var listTotalColumns = {};\n        var listTotalRows = {};\n        var columns = [];\n        var rows = [];\n        var len = data.length;\n        var dat;\n        //var result = {};\n        var result = {};\n        //console.log(\"opt\",opt)\n        for (var i = 0; i < opt.values.length; i++) {\n            result[opt.values[i]] = {};\n        }\n\n\n        for (var i = 0; i < len; i++) {\n\n            var indexR = [];\n            var indexC = [];\n            dat = data[i];\n            for (var r in row) {\n                indexR.push(data[i][row[r]]);\n            }\n            for (var c in cols) {\n                indexC.push(data[i][cols[c]]);\n            }\n            indexR = indexR.join(\"|*\");\n            indexC = indexC.join(\"|*\");\n\n            for (var j = 0; j < opt.values.length; j++) {\n                if (!result[opt.values[j]][indexR]) {\n                    result[opt.values[j]][indexR] = {};\n                }\n\n                if (!result[opt.values[j]][indexR][indexC]) {\n                    result[opt.values[j]][indexR][indexC] = [myfunc.getGetValue(opt.values[j], \"number\")(dat, opt.values[j])];\n                }\n                else {\n                    result[opt.values[j]][indexR][indexC].push(myfunc.getGetValue(opt.values[j], \"number\")(dat, opt.values[j]));\n                }\n            }\n\n\n            listTotalColumns[indexC] = true;\n            listTotalRows[indexR] = true;\n        }\n\n        for (var i in listTotalColumns) {\n            columns.push(i)\n        }\n        for (var i in listTotalRows) {\n            rows.push(i)\n        }\n        rows.sort();\n        cols.sort();\n        //console.log(\"result\",result)\n        return {data: result, columns: columns, rows: rows};\n    }\n\n\n    /*  function makeHeaders(data, fieldNames) {\n     var result = [];\n     var dataLength = data.length;\n     var namesLength = fieldNames.length;\n     var i, j;\n     for (i = 0; i < dataLength; i++) {\n     var datum = data[i];\n     var entry = [];\n     for (j = 0; j < namesLength; j++) {\n     entry[j] = datum[fieldNames[j]];\n     }\n     result[i] = entry;\n     }\n     return result;\n     }*/\n    function pivotData(data, userOptions) {\n        //console.log(\"pivotData\");\n        if (userOptions === undefined) {\n            userOptions = {};\n        }\n        var options = {};\n        Utils.copyProperties(defaultOptions, options);\n        if (userOptions) {\n            Utils.copyProperties(userOptions, options);\n        }\n        // var leftSet = new SortedSet(Utils.makeComparator(rowNames, data, options));\n        //var topSet = new SortedSet(Utils.makeComparator(columnNames, data, options));\n\n        //console.log(\"leftSet\",leftSet,\"topSet\",topSet)\n        //ONLY if we want to use an derived attributs function or a filter attribute\n        //options.extractor=function(e){return e}\n        if (options.extractor) {\n            data = extractData(data, options);\n        }\n\n        //return buildPivotResult(data, userOptions.ROWS, userOptions.COLS, myfunc.getGetValue(userOptions.GetValue), userOptions.cumulative);\n        return buildPivotResult(data, userOptions);\n\n    }\n\n\n    function toPivotData(FX, userOptions) {\n        //console.log(\"toPivotData\",FX,userOptions)\n        var data = [];\n        //console.log(\"userOptions toPivotDat\",userOptions, userOptions.derived)\n//\t\tvar derivedAttributes=userOptions.derivedAttributes\n        for (var i in FX.data) {\n            var tmp = {}\n            for (var j in FX.metadata.dsd.columns) {\n                tmp[FX.metadata.dsd.columns[j].id] = FX.data[i][j];\n\n            }\n            for (var d in userOptions.derived) {\n                //console.log(userOptions.derived[d])\n                tmp[d] = userOptions.derived[d](tmp);\n            }\n            //console.log(tmp)\n            data.push(tmp);\n        }\n        //console.log(\"pivotdata\",data)\n\n        return pivotData(data, userOptions);\n    }\n\n    function toFX(FX, userOptions) {\n        var result = {data: [], metadata: {dsd: {columns: []}}}\n        var pivotdata = toPivotData(FX, userOptions);\n        for (var ii in pivotdata.rows) {\n            var i = pivotdata.rows[ii];\n            var temp = i.split(\"|*\");\n\n            //for internaldata\n            for (var jj in pivotdata.columns) {\n                var j = pivotdata.columns[jj];\n                /*if (pivotdata.data[i][j]) {\n                 temp.push(myfunc.getAgg(userOptions.Aggregator)(pivotdata.data[i][j],\n                 myfunc.getFormater(userOptions.Formater),userOptions.nbDecimal) )\n                 //temp2.push(myfunc.getAgg(userOptions.aggregator)(pivotdata.data[i][j], myfunc.getFormater(userOptions.formater), userOptions.nbDecimal));\n                 //console.log(pivotdata.data[i][j])\n                 }\n                 else {\n                 temp.push(null);\n                 //temp2.push(null)\n                 }*/\n\n\n                for (var vtemp in userOptions.values) {\n                    var vindex = userOptions.values[vtemp]\n                    if (pivotdata.data[vindex][i][j]) {\n                        var myAgg = null;\n                        //console.log(userOptions.formatter,vindex)\n                        if (userOptions.aggregationFn[vindex]) {\n                            myAgg = userOptions.aggregationFn[vindex]\n                        }\n                        else {\n                            myAgg = \"default\"\n                        }\n                        temp.push(myfunc.getAgg(vindex, myAgg)(pivotdata.data[vindex][i][j],\n                            myfunc.getFormater(userOptions.formatter),\n                            userOptions.decimals));\n                    }\n                    else {\n                        temp.push(null)\n                    }\n                }\n\n\n            }\n            result.data.push(temp)\n            //MYFINALRESULT.data.push(temp2)\n        }\n\n        var traduc = {}\n        for (var i in FX.metadata.dsd.columns) {\n            traduc[FX.metadata.dsd.columns[i].id] = FX.metadata.dsd.columns[i].title[\"EN\"]\n        }\n\n        for (var i in userOptions.ROWS) {\n            result.metadata.dsd.columns.push({id: userOptions.ROWS[i], title: {EN: traduc[userOptions.ROWS[i]]}})\n        }\n        for (var i in userOptions.COLS) {\n            result.metadata.dsd.columns.push({id: userOptions.COLS[i], title: {EN: traduc[userOptions.COLS[i]]}})\n        }\n\n\n        for (var i in pivotdata.columns) {\n            result.metadata.dsd.columns.push({\n                id: i.replace(/\\|\\*/g, \"_\"),\n                title: {EN: i.replace(/\\|\\*/g, \"\\n\")},\n                subject: \"value\"\n            })\n        }\n        return result;\n\n    }\n\n\n    function toFXJson(FX, userOptions) {\n        //console.log(\"toFXJson\",FX,userOptions);\n        MYFINALRESULT = {\n            data: [],\n            unit: [],\n            flag: [],\n            attribute: [],\n            rows: [],\n            cols: [],\n            cols2: [],\n            cols2label: [],\n            okline: [],\n            nookline: [],\n            rowname: [],\n            colsname: []\n        };//to internal test and dataset function\n\n\n        var pivotdata = toPivotData(FX, userOptions);\n        for (var ii in pivotdata.rows) {\n            var i = pivotdata.rows[ii];\n\n            var temp = i.split(\"|*\");\n            MYFINALRESULT.rows.push(temp);\n\n            var temp2 = [];\n            if (userOptions.hasOwnProperty(\"showRowHeaders\") && userOptions.showRowHeaders == true) {\n                temp2 = JSON.parse(JSON.stringify(temp))\n            }\n            //for internaldata\n\n\n            for (var jj in pivotdata.columns) {\n                var j = pivotdata.columns[jj];\n\n                for (var vtemp in userOptions.values) {\n                    var vindex = userOptions.values[vtemp]\n                    if (pivotdata.data[vindex][i][j]) {\n                        var myAgg = null;\n\n                        if (userOptions.aggregationFn[vindex]) {\n                            myAgg = userOptions.aggregationFn[vindex]\n                        }\n                        else {\n                            myAgg = \"default\";\n                        }\n\n\n                        temp2.push(myfunc.getAgg(vindex, myAgg)(pivotdata.data[vindex][i][j],\n                            myfunc.getFormater(userOptions.formatter),\n                            userOptions.decimals));\n\n                    }\n                    else {\n                        temp2.push(null)\n                    }\n                }\n            }\n            MYFINALRESULT.data.push(temp2)\n        }\n\n        var traduc = {}\n        for (var i in FX.metadata.dsd.columns) {\n            traduc[FX.metadata.dsd.columns[i].id] = FX.metadata.dsd.columns[i].title[\"EN\"]\n        }\n\n        for (var i in userOptions.rows) {\n            MYFINALRESULT.rowname.push({id: userOptions.rows[i], title: {EN: traduc[userOptions.rows[i]]}})\n        }\n        if (userOptions.rows.length == 0) {\n            MYFINALRESULT.rowname.push({id: \"row\", title: {EN: \"ROW\"}})\n        }\n        for (var i in userOptions.columns) {\n            MYFINALRESULT.colsname.push({id: userOptions.columns[i], title: {EN: traduc[userOptions.columns[i]]}})\n        }\n\n        //console.log(\"userOptions\",userOptions)\n        var hidden2 = {};\n        for (var i in userOptions.hidden) {\n            hidden2[userOptions.hidden[i]] = true\n        }\n\n\n        for (var ii in pivotdata.columns) {\n            var i = pivotdata.columns[ii];\n            MYFINALRESULT.cols.push({id: i.replace(/\\|\\*/g, \"_\"), title: {EN: i.replace(/\\|\\*/g, \"\\n\")}});\n            MYFINALRESULT.cols2.push(i.split(\"|*\"))\n\n\n            MYFINALRESULT.cols2label.push(i.split(\"|*\"))\n\n        }\n\n        return MYFINALRESULT;\n\n    }\n\n\n    return function () {\n        return {\n            pivot: toFXJson,\n\n\n            toFXJson: toFXJson,\n            toPivotData: toPivotData,\n            toFX: toFX,\n\n\n            identity: identity,\n            toTree: toTree\n        }\n    };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/index.js\n ** module id = 1\n ** module chunks = 0\n **/","if (typeof define !== 'function') {\n    var define = require('amdefine')(module);\n}\ndefine(function () {\n\n        var jStat = require('jStat').jStat;\n\n        var Aggregator = {\n            \"VALUE0\": {\n\n                \"default\": function (cell, format, nbDec) {\n                    //\tconsole.log(\"AGG DEFAULT\",cell)\n                    var a = jStat(cell);\n                    return format(a.sum(), nbDec)\n                },\n                \"sum\": function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.sum(), nbDec)\n                },\n                avg: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.mean(), nbDec)\n                },\n                median: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.median(), nbDec)\n                },\n                stdev: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.stdev(), nbDec)\n                },\n                count: function (cell, format, nbDec) {\n                    var a = cell;\n                    return format(a.length, nbDec)\n                },\n                concat: function (cell, format, nbDec) {\n                    var a = cell;\n                    return a.join(\" - \")\n                }\n            },\n            \"Value\": {\n\n                \"default\": function (cell, format, nbDec) {\n                    //\tconsole.log(\"AGG DEFAULT\",cell)\n                    var a = jStat(cell);\n                    return format(a.sum(), nbDec)\n                },\n                \"sum\": function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.sum(), nbDec)\n                },\n                avg: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.mean(), nbDec)\n                },\n                median: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.median(), nbDec)\n                },\n                stdev: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.stdev(), nbDec)\n                },\n                count: function (cell, format, nbDec) {\n                    var a = cell;\n                    return format(a.length, nbDec)\n                },\n                concat: function (cell, format, nbDec) {\n                    var a = cell;\n                    return a.join(\" - \")\n                }\n            },\n            \"VALUE\": {\n\n                \"default\": function (cell, format, nbDec) {\n                    //\tconsole.log(\"AGG DEFAULT\",cell)\n                    var a = jStat(cell);\n                    return format(a.sum(), nbDec)\n                },\n                \"sum\": function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.sum(), nbDec)\n                },\n                avg: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.mean(), nbDec)\n                },\n                median: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.median(), nbDec)\n                },\n                stdev: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.stdev(), nbDec)\n                },\n                count: function (cell, format, nbDec) {\n                    var a = cell;\n                    return format(a.length, nbDec)\n                },\n                concat: function (cell, format, nbDec) {\n                    var a = cell;\n                    return a.join(\" - \")\n                }\n            },\n            \"value\": {\n\n                \"default\": function (cell, format, nbDec) {\n                    //\tconsole.log(\"AGG DEFAULT\",cell)\n                    var a = jStat(cell);\n                    return format(a.sum(), nbDec)\n                },\n                \"sum\": function (cell, format, nbDec) {\n\n                    var a = jStat(cell);\n                    return format(a.sum(), nbDec)\n                },\n                avg: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.mean(), nbDec)\n                },\n                median: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.median(), nbDec)\n                },\n                stdev: function (cell, format, nbDec) {\n                    var a = jStat(cell);\n                    return format(a.stdev(), nbDec)\n                },\n                count: function (cell, format, nbDec) {\n                    var a = cell;\n                    return format(a.length, nbDec)\n                },\n                concat: function (cell, format, nbDec) {\n                    var a = cell;\n                    return a.join(\" - \")\n                }\n            },\n            um: {\n                default: function (cell, format, nbDec) {\n                    var ret = cell[0];\n                    for (var i in cell) {\n\n                        if (cell[i] != ret) {\n                            ret = \"_\";\n                        }\n                    }\n                    return ret;\n                },\n                diff: function (cell, format, nbDec) {\n                    var ret = cell[0];\n                    for (var i in cell) {\n\n                        if (cell[i] != ret) {\n                            ret = \"_\";\n                        }\n                    }\n                    return ret;\n\n                }\n            },\n            flag: {\n                concat: function (cell, format, nbDec) {\n                    var a = cell;\n                    return a.join(\" - \")\n                },\n                default: function (cell, format, nbDec) {\n                    var a = cell;\n                    return a.join(\" - \")\n                }\n            },\n            v1: {\n                count: function (cell, format, nbDec) {\n                    var a = cell;\n                    return format(a.length, nbDec)\n                },\n                concat: function (cell, format, nbDec) {\n                    var a = cell;\n                    return a.join(\" - \")\n                },\n                default: function (cell, format, nbDec) {\n                    var a = cell;\n                    return a.join(\" - \")\n                }\n            },\n            default: function (cell, format, nbDec) {\n                var a = cell;\n                return a.join(\" \")\n            }\n        };\n        //\tconsole.log(\"Aggregator\",Aggregator.value)\n\n\n        var GetValue = {\n            default: function (rec, champ) {\n                return rec[champ];\n            },\n            value: {\n                number: function (rec) {\n                    if (rec.value == null) {\n                        return null\n                    }\n                    return parseFloat(rec.value)\n                }\n                ,\n                string: function (rec) {\n                    return rec.value\n                }\n            },\n            Value: {\n                number: function (rec) {\n                    if (rec.Value == null) {\n                        return null\n                    }\n                    return parseFloat(rec.Value)\n                }, string: function (rec) {\n                    return rec.Value\n                }\n            }\n\n        };\n        /*Classic:function(rec){return rec.Value},\n         classic:function(rec){return rec.value},\n         ClassicToNumber:function(rec){if(rec.Value==null){return null}return parseFloat(rec.Value)},\n         classicToNumber:function(rec){if(rec.value==null){return null}return parseFloat(rec.value)},\n         customToString:function(rec,args){ret=[];for(var i in args){ret.push(rec[args[i]])}},\n         customToNumber:function(rec,args){ret=[];for(var i in args){ret.push( parseFloat(rec[args[i]]) )}}*/\n\n\n        var Formater = {\n            localstring: function (e, nbdecimal) {\n                return (Math.floor(e * Math.pow(10, nbdecimal)) / Math.pow(10, nbdecimal)).toLocaleString()\n            },\n            value: function (e, nbdecimal) {\n                return Math.floor(e * Math.pow(10, nbdecimal)) / Math.pow(10, nbdecimal)\n            },\n            string: function (e, nbdecimal) {\n                return e\n            }\n\n        };\n\n        var getListAggregator = function () {//for toolbar\n            ret = {};\n            for (var i in Aggregator) {\n\n                ret[i] = {};\n                for (var j in Aggregator[i]) {\n                    ret[i][j] = Aggregator[i][j];\n                }\n\n            }\n            return ret;\n        }\n\n        var getAgg = function (champ, choix) {\n\n            if (!Aggregator[champ]) {\n                return Aggregator.default\n            }\n            if (!choix) {\n                choix = \"default\";\n            }\n            return Aggregator[champ][choix];\n        }\n\n        var getGetValue = function (champ, choix) {\n            if (!GetValue[champ]) {\n                return GetValue[\"default\"]\n            }\n            else if (!GetValue[champ][choix]) {\n                return GetValue[\"default\"]\n            }\n            else {\n                return GetValue[champ][choix]\n            }\n        }\n\n        var getFormater = function (choix) {\n            return Formater[choix]\n        }\n\n        return function () {\n            return {\n                getListAggregator: getListAggregator,\n                getAgg: getAgg,\n                getGetValue: getGetValue,\n                getFormater: getFormater\n            }\n        }\n\n    }\n);\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/functions.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"jStat\"\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}